<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>msa.hello</groupId>
    <artifactId>msa-api-hello</artifactId>
    <version>1.0.0</version>

    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>1.3.3.RELEASE</version>
    </parent>

    <properties>
        <java.version>1.8</java.version>
        <docker.registry>127.0.0.1:50000</docker.registry>
    </properties>

    <dependencies>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <!--spring boot maven插件-->
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
            </plugin>
            <!--docker 插件-->
            <plugin>
                <groupId>com.spotify</groupId>
                <artifactId>docker-maven-plugin</artifactId>
                <version>1.0.0</version>
                <configuration>
                    <!--
                        imageName用于指定docker镜像的完整名称
                        ${project.groupId} 仓库名
                        ${project.artifactId} 镜像名
                        ${project.version} 标签名
                    -->
                    <imageName>
                        ${docker.registry}/${project.groupId}/${project.artifactId}:${project.version}
                    </imageName>
                    <baseImage>java</baseImage>

                    <!--指定远程 docker api地址-->
                    <dockerHost>http://192.168.138.202:2375</dockerHost>
                    <!--
                        dockerDirectory 指定docker文件所在目录
                        ${project.build.outputDirectory}读取经maven过滤后的docker文件，
                        该文件中的@project.build.finalName@占位符此时已经被代替为实际内
                        容
                    -->
                  <!--  <dockerDirectory>
                        ${project.build.outputDirectory}
                    </dockerDirectory>-->
                    <entryPoint>
                        ["java","-jar","/${project.build.finalName}.jar"]
                    </entryPoint>
                    <resources>
                        <resource>
                            <targetPath>/</targetPath>
                            <!--
                               用于指定需要复制的根目录
                               ${project.build.outputDirectory}表示target目录
                           -->
                            <directory>${project.build.directory}</directory>
                            <!--
                                指定需要复制的文件
                                ${project.build.finalName}maven打包后的jar文件
                            -->
                            <include>${project.build.finalName}.jar</include>
                        </resource>
                    </resources>
                </configuration>
            </plugin>
        </plugins>
    </build>

</project>